
path_dict2 = {'Research Interest': [[0, 4, 6, 5, 2, 3, 3, 4, 6, 5, 1, 1, 1, 2, 1, 1, 0, 1, 1, 1], [0, 4, 6, 5, 2, 3, 3, 4, 6, 5, 1, 1, 1, 2, 1, 1, 2, 4, 8, 8], [0, 4, 6, 5, 2, 3, 3, 4, 6, 5, 1, 1, 1, 2, 1, 1, 3, 6, 14, 14], [0, 4, 6, 5, 2, 3, 3, 4, 6, 5, 1, 1, 1, 2, 1, 1, 4, 8, 20, 20], [0, 4, 6, 5, 2, 3, 3, 4, 6, 5, 1, 1, 1, 2, 1, 1, 4, 8, 24, 24], [0, 4, 6, 5, 2, 3, 3, 4, 6, 5, 1, 1, 1, 2, 1, 1, 4, 8, 29, 29], [0, 4, 6, 5, 2, 3, 3, 4, 6, 5, 1, 1, 1, 2, 1, 1, 6, 11, 31, 31], [0, 4, 6, 5, 2, 3, 3, 4, 6, 5, 1, 1, 1, 2, 1, 1, 6, 11, 32, 32], [0, 4, 6, 5, 2, 3, 3, 4, 6, 5, 1, 1, 1, 2, 1, 1, 6, 11, 34, 34], [0, 4, 6, 5, 2, 3, 3, 4, 6, 5, 1, 1, 1, 2, 1, 1, 6, 11, 36, 36], [0, 4, 6, 5, 2, 3, 3, 4, 6, 5, 1, 1, 1, 2, 1, 1, 6, 11, 37, 37], [0, 4, 6, 5, 2, 3, 3, 4, 6, 5, 1, 1, 1, 2, 1, 1, 5, 9], [0, 4, 6, 5, 2, 3, 3, 4, 6, 5, 1, 1, 1, 2, 1, 1, 6, 10], [0, 4, 6, 5, 3, 4, 6, 7, 15, 7, 4, 3, 2, 3, 2, 4, 16, 26], [0, 4, 6, 5, 3, 4, 6, 7, 15, 7, 4, 3, 2, 3, 2, 9, 36, 59], [0, 4, 6, 5, 3, 4, 6, 7, 15, 7, 4, 3, 2, 3, 2, 10, 40, 66], [0, 4, 6, 5, 3, 4, 6, 7, 15, 7, 4, 3, 2, 3, 2, 13, 52, 87], [0, 4, 6, 5, 3, 4, 6, 7, 15, 7, 4, 3, 2, 3, 2, 15, 60, 101], [0, 4, 6, 5, 3, 4, 6, 7, 15, 7, 4, 3, 2, 3, 2, 16, 64, 108], [0, 4, 6, 5, 3, 4, 6, 7, 15, 7, 4, 3, 2, 3, 2, 20, 80, 136], [0, 4, 6, 5, 3, 4, 6, 7, 16, 8, 6, 4, 3, 4, 3, 21, 84, 142], [0, 4, 6, 5, 3, 4, 6, 7, 17, 9, 8, 5, 4, 5, 4, 25, 100, 167], [0, 4, 6, 5, 3, 4, 6, 7, 17, 9, 8, 5, 4, 5, 4, 28, 112, 184], [0, 4, 6, 5, 3, 4, 6, 7, 17, 9, 8, 5, 4, 5, 4, 29, 116, 190], [0, 4, 6, 5, 3, 4, 6, 7, 17, 9, 8, 5, 4, 5, 4, 30, 120, 195], [0, 4, 6, 5, 3, 4, 6, 7, 17, 9, 8, 5, 4, 5, 4, 36, 144, 228], [0, 4, 6, 5, 3, 4, 6, 7, 17, 9, 8, 5, 4, 5, 4, 40, 160, 252], [0, 4, 6, 5, 3, 4, 6, 7, 18, 10, 10, 6, 5, 6, 5, 42, 168, 264], [0, 4, 6, 5, 3, 4, 6, 7, 18, 10, 10, 6, 5, 6, 5, 44, 176, 276], [0, 4, 6, 5, 3, 4, 6, 7, 18, 10, 10, 6, 5, 6, 5, 45, 180, 281], [0, 4, 6, 5, 3, 4, 6, 7, 19, 11, 12, 7, 6, 7, 6, 46, 184, 286], [0, 4, 6, 5, 3, 4, 6, 7, 19, 11, 12, 7, 6, 7, 6, 50, 200, 313], [0, 4, 6, 5, 3, 4, 7, 8, 22, 14, 17, 11, 12, 10, 9, 65, 239], [0, 4, 6, 5, 3, 4, 6, 7, 20, 12, 14, 8, 8, 9, 8, 59], [0, 4, 7, 6, 4, 7, 10, 12, 29, 17, 19, 17, 18, 16], [0, 4, 6, 5, 3, 4, 6, 7, 15, 7, 3], [0, 4, 6, 5, 3, 4, 6, 7, 16, 8, 5], [0, 4, 6, 5, 3, 4, 6, 7, 20, 12, 13], [0, 4, 5, 3, 0, 0, 0, 1, 3, 2], [0, 4, 7, 6, 4, 6, 9, 10, 25]], 'Position': [[0, 4, 6, 5, 2, 3, 3, 4, 6, 5, 1, 1, 1, 2, 1, 1, 2, 4, 4, 4], [0, 4, 6, 5, 2, 3, 3, 4, 6, 5, 1, 1, 1, 2, 1, 1, 2, 4, 5, 5], [0, 4, 6, 5, 2, 3, 3, 4, 6, 5, 1, 1, 1, 2, 1, 1, 2, 4, 6, 6], [0, 4, 6, 5, 2, 3, 3, 4, 6, 5, 1, 1, 1, 2, 1, 1, 2, 4, 7, 7], [0, 4, 6, 5, 2, 3, 3, 4, 6, 5, 1, 1, 1, 2, 1, 1, 2, 4, 9, 9], [0, 4, 6, 5, 2, 3, 3, 4, 6, 5, 1, 1, 1, 2, 1, 1, 2, 4, 10, 10], [0, 4, 6, 5, 2, 3, 3, 4, 6, 5, 1, 1, 1, 2, 1, 1, 3, 6, 17, 17], [0, 4, 6, 5, 2, 3, 3, 4, 6, 5, 1, 1, 1, 2, 1, 1, 3, 6, 18, 18], [0, 4, 6, 5, 2, 3, 3, 4, 6, 5, 1, 1, 1, 2, 1, 1, 4, 8, 21, 21], [0, 4, 6, 5, 2, 3, 3, 4, 6, 5, 1, 1, 1, 2, 1, 1, 4, 8, 22, 22], [0, 4, 6, 5, 2, 3, 3, 4, 6, 5, 1, 1, 1, 2, 1, 1, 4, 8, 26, 26], [0, 4, 6, 5, 2, 3, 3, 4, 6, 5, 1, 1, 1, 2, 1, 1, 4, 8, 27, 27], [0, 4, 6, 5, 2, 3, 3, 4, 6, 5, 1, 1, 1, 2, 1, 1, 4, 8, 28, 28], [0, 4, 6, 5, 2, 3, 3, 4, 6, 5, 1, 1, 1, 2, 1, 1, 6, 11, 30, 30], [0, 4, 6, 5, 2, 3, 3, 4, 6, 5, 1, 1, 1, 2, 1, 1, 6, 11, 33, 33], [0, 4, 6, 5, 3, 4, 6, 7, 15, 7, 4, 3, 2, 3, 2, 2, 8, 13], [0, 4, 6, 5, 3, 4, 6, 7, 15, 7, 4, 3, 2, 3, 2, 2, 8, 14], [0, 4, 6, 5, 3, 4, 6, 7, 15, 7, 4, 3, 2, 3, 2, 3, 12, 20], [0, 4, 6, 5, 3, 4, 6, 7, 15, 7, 4, 3, 2, 3, 2, 4, 16, 27], [0, 4, 6, 5, 3, 4, 6, 7, 15, 7, 4, 3, 2, 3, 2, 5, 20, 33], [0, 4, 6, 5, 3, 4, 6, 7, 15, 7, 4, 3, 2, 3, 2, 6, 24, 40], [0, 4, 6, 5, 3, 4, 6, 7, 15, 7, 4, 3, 2, 3, 2, 7, 28, 46], [0, 4, 6, 5, 3, 4, 6, 7, 15, 7, 4, 3, 2, 3, 2, 8, 32, 53], [0, 4, 6, 5, 3, 4, 6, 7, 15, 7, 4, 3, 2, 3, 2, 9, 36, 60], [0, 4, 6, 5, 3, 4, 6, 7, 15, 7, 4, 3, 2, 3, 2, 10, 40, 67], [0, 4, 6, 5, 3, 4, 6, 7, 15, 7, 4, 3, 2, 3, 2, 11, 44, 74], [0, 4, 6, 5, 3, 4, 6, 7, 15, 7, 4, 3, 2, 3, 2, 12, 48, 81], [0, 4, 6, 5, 3, 4, 6, 7, 15, 7, 4, 3, 2, 3, 2, 13, 52, 88], [0, 4, 6, 5, 3, 4, 6, 7, 15, 7, 4, 3, 2, 3, 2, 14, 56, 95], [0, 4, 6, 5, 3, 4, 6, 7, 15, 7, 4, 3, 2, 3, 2, 15, 60, 102], [0, 4, 6, 5, 3, 4, 6, 7, 15, 7, 4, 3, 2, 3, 2, 16, 64, 109], [0, 4, 6, 5, 3, 4, 6, 7, 15, 7, 4, 3, 2, 3, 2, 17, 68, 116], [0, 4, 6, 5, 3, 4, 6, 7, 15, 7, 4, 3, 2, 3, 2, 18, 72, 123], [0, 4, 6, 5, 3, 4, 6, 7, 15, 7, 4, 3, 2, 3, 2, 19, 76, 130], [0, 4, 6, 5, 3, 4, 6, 7, 15, 7, 4, 3, 2, 3, 2, 20, 80, 137], [0, 4, 6, 5, 3, 4, 6, 7, 16, 8, 6, 4, 3, 4, 3, 21, 84, 143], [0, 4, 6, 5, 3, 4, 6, 7, 17, 9, 8, 5, 4, 5, 4, 22, 88, 150], [0, 4, 6, 5, 3, 4, 6, 7, 17, 9, 8, 5, 4, 5, 4, 23, 92, 156], [0, 4, 6, 5, 3, 4, 6, 7, 17, 9, 8, 5, 4, 5, 4, 24, 96, 162], [0, 4, 6, 5, 3, 4, 6, 7, 17, 9, 8, 5, 4, 5, 4, 25, 100, 168], [0, 4, 6, 5, 3, 4, 6, 7, 17, 9, 8, 5, 4, 5, 4, 26, 104, 173], [0, 4, 6, 5, 3, 4, 6, 7, 17, 9, 8, 5, 4, 5, 4, 26, 104, 174], [0, 4, 6, 5, 3, 4, 6, 7, 17, 9, 8, 5, 4, 5, 4, 27, 108, 180], [0, 4, 6, 5, 3, 4, 6, 7, 17, 9, 8, 5, 4, 5, 4, 28, 112, 185], [0, 4, 6, 5, 3, 4, 6, 7, 17, 9, 8, 5, 4, 5, 4, 29, 116, 191], [0, 4, 6, 5, 3, 4, 6, 7, 17, 9, 8, 5, 4, 5, 4, 30, 120, 196], [0, 4, 6, 5, 3, 4, 6, 7, 17, 9, 8, 5, 4, 5, 4, 31, 124, 201], [0, 4, 6, 5, 3, 4, 6, 7, 17, 9, 8, 5, 4, 5, 4, 32, 128, 207], [0, 4, 6, 5, 3, 4, 6, 7, 17, 9, 8, 5, 4, 5, 4, 33, 132, 212], [0, 4, 6, 5, 3, 4, 6, 7, 17, 9, 8, 5, 4, 5, 4, 34, 136, 218], [0, 4, 6, 5, 3, 4, 6, 7, 17, 9, 8, 5, 4, 5, 4, 35, 140, 223], [0, 4, 6, 5, 3, 4, 6, 7, 17, 9, 8, 5, 4, 5, 4, 36, 144, 229], [0, 4, 6, 5, 3, 4, 6, 7, 17, 9, 8, 5, 4, 5, 4, 37, 148, 235], [0, 4, 6, 5, 3, 4, 6, 7, 17, 9, 8, 5, 4, 5, 4, 38, 152, 241], [0, 4, 6, 5, 3, 4, 6, 7, 17, 9, 8, 5, 4, 5, 4, 39, 156, 247], [0, 4, 6, 5, 3, 4, 6, 7, 17, 9, 8, 5, 4, 5, 4, 40, 160, 253], [0, 4, 6, 5, 3, 4, 6, 7, 17, 9, 8, 5, 4, 5, 4, 41, 164, 259], [0, 4, 6, 5, 3, 4, 6, 7, 18, 10, 10, 6, 5, 6, 5, 42, 168, 265], [0, 4, 6, 5, 3, 4, 6, 7, 18, 10, 10, 6, 5, 6, 5, 43, 172, 271], [0, 4, 6, 5, 3, 4, 6, 7, 18, 10, 10, 6, 5, 6, 5, 44, 176, 277], [0, 4, 6, 5, 3, 4, 6, 7, 18, 10, 10, 6, 5, 6, 5, 45, 180, 282], [0, 4, 6, 5, 3, 4, 6, 7, 19, 11, 12, 7, 6, 7, 6, 46, 184, 287], [0, 4, 6, 5, 3, 4, 6, 7, 19, 11, 12, 7, 6, 7, 6, 47, 188, 294], [0, 4, 6, 5, 3, 4, 6, 7, 19, 11, 12, 7, 6, 7, 6, 48, 192, 300], [0, 4, 6, 5, 3, 4, 6, 7, 19, 11, 12, 7, 6, 7, 6, 49, 196, 307], [0, 4, 6, 5, 3, 4, 6, 7, 19, 11, 12, 7, 6, 7, 6, 50, 200, 314], [0, 4, 6, 5, 3, 4, 6, 7, 19, 11, 12, 7, 6, 7, 6, 51, 204, 321], [0, 4, 6, 5, 3, 4, 6, 7, 19, 11, 12, 7, 6, 7, 6, 52, 208, 327], [0, 4, 6, 5, 3, 4, 6, 7, 20, 12, 14, 8, 7, 8, 7, 53, 212, 334], [0, 4, 6, 5, 3, 4, 6, 7, 20, 12, 14, 8, 7, 8, 7, 54, 216, 341], [0, 4, 6, 5, 3, 4, 6, 7, 20, 12, 14, 8, 7, 8, 7, 55, 220, 347], [0, 4, 6, 5, 3, 4, 6, 7, 20, 12, 14, 8, 7, 8, 7, 56, 224, 353], [0, 4, 6, 5, 3, 4, 6, 7, 20, 12, 14, 8, 7, 8, 7, 57, 228, 359], [0, 4, 6, 5, 3, 4, 6, 7, 20, 12, 14, 8, 7, 8, 7, 58, 232, 364], [0, 4, 6, 5, 3, 4, 7, 8, 22, 14, 17, 11, 12, 10, 9, 61, 235], [0, 4, 6, 5, 3, 4, 7, 8, 22, 14, 17, 11, 12, 10, 9, 62, 236], [0, 4, 6, 5, 3, 4, 7, 8, 22, 14, 17, 11, 12, 10, 9, 63, 237], [0, 4, 6, 5, 3, 4, 7, 8, 22, 14, 17, 11, 12, 10, 9, 64, 238], [0, 4, 6, 5, 3, 4, 7, 8, 22, 14, 17, 11, 12, 10, 9, 66, 240], [0, 4, 6, 5, 3, 4, 7, 8, 22, 14, 17, 11, 12, 10, 9, 67, 241], [0, 4, 6, 5, 3, 4, 7, 8, 22, 14, 16, 10, 10], [0, 4, 6, 5, 3, 4, 7, 8, 22, 14, 16, 10, 11], [0, 4, 6, 5, 3, 4, 6, 7, 17, 9, 7], [0, 4, 6, 5, 3, 4, 6, 7, 19, 11, 11], [0, 4, 5, 4, 1, 2, 2, 3, 5, 4], [0, 4, 7, 6, 4, 5, 8, 9, 23, 15], [0, 4, 6, 5, 3, 4, 4, 5, 11], [0, 4, 6, 5, 3, 4, 6, 7, 13]], 'Name': [[0, 4, 6, 5, 2, 3, 3, 4, 6, 5, 1, 1, 1, 2, 1, 1, 3, 6, 15, 15], [0, 4, 6, 5, 2, 3, 3, 4, 6, 5, 1, 1, 1, 2, 1, 1, 6, 11, 35, 35], [0, 4, 6, 5, 3, 4, 6, 7, 15, 7, 4, 3, 2, 3, 2, 3, 12, 19], [0, 4, 6, 5, 3, 4, 6, 7, 15, 7, 4, 3, 2, 3, 2, 5, 20, 32], [0, 4, 6, 5, 3, 4, 6, 7, 15, 7, 4, 3, 2, 3, 2, 6, 24, 39], [0, 4, 6, 5, 3, 4, 6, 7, 15, 7, 4, 3, 2, 3, 2, 7, 28, 45], [0, 4, 6, 5, 3, 4, 6, 7, 15, 7, 4, 3, 2, 3, 2, 8, 32, 52], [0, 4, 6, 5, 3, 4, 6, 7, 15, 7, 4, 3, 2, 3, 2, 11, 44, 73], [0, 4, 6, 5, 3, 4, 6, 7, 15, 7, 4, 3, 2, 3, 2, 12, 48, 80], [0, 4, 6, 5, 3, 4, 6, 7, 15, 7, 4, 3, 2, 3, 2, 17, 68, 115], [0, 4, 6, 5, 3, 4, 6, 7, 15, 7, 4, 3, 2, 3, 2, 18, 72, 122], [0, 4, 6, 5, 3, 4, 6, 7, 15, 7, 4, 3, 2, 3, 2, 19, 76, 129], [0, 4, 6, 5, 3, 4, 6, 7, 17, 9, 8, 5, 4, 5, 4, 23, 92, 155], [0, 4, 6, 5, 3, 4, 6, 7, 17, 9, 8, 5, 4, 5, 4, 24, 96, 161], [0, 4, 6, 5, 3, 4, 6, 7, 17, 9, 8, 5, 4, 5, 4, 27, 108, 179], [0, 4, 6, 5, 3, 4, 6, 7, 17, 9, 8, 5, 4, 5, 4, 33, 132, 211], [0, 4, 6, 5, 3, 4, 6, 7, 17, 9, 8, 5, 4, 5, 4, 34, 136, 217], [0, 4, 6, 5, 3, 4, 6, 7, 17, 9, 8, 5, 4, 5, 4, 39, 156, 246], [0, 4, 6, 5, 3, 4, 6, 7, 18, 10, 10, 6, 5, 6, 5, 43, 172, 270], [0, 4, 6, 5, 3, 4, 6, 7, 19, 11, 12, 7, 6, 7, 6, 47, 188, 293], [0, 4, 6, 5, 3, 4, 6, 7, 19, 11, 12, 7, 6, 7, 6, 49, 196, 306], [0, 4, 6, 5, 3, 4, 6, 7, 19, 11, 12, 7, 6, 7, 6, 51, 204, 320], [0, 4, 6, 5, 3, 4, 6, 7, 19, 11, 12, 7, 6, 7, 6, 52, 208, 326], [0, 4, 6, 5, 3, 4, 6, 7, 20, 12, 14, 8, 7, 8, 7, 53, 212, 333], [0, 4, 6, 5, 3, 4, 6, 7, 20, 12, 14, 8, 7, 8, 7, 54, 216, 340], [0, 4, 6, 5, 3, 4, 6, 7, 20, 12, 14, 8, 7, 8, 7, 55, 220, 346], [0, 4, 6, 5, 3, 4, 6, 7, 20, 12, 14, 8, 7, 8, 7, 56, 224, 352], [0, 4, 6, 5, 3, 4, 6, 7, 20, 12, 14, 8, 7, 8, 7, 57, 228, 358], [0, 4, 6, 5, 3, 4, 6, 7, 20, 12, 14, 8, 7, 8, 7, 58, 232, 363], [0, 4, 6, 5, 3, 4, 6, 7, 20, 12, 14, 8, 8, 9, 8, 60], [0, 4, 5, 3, 0, 0, 0, 1, 1, 1]]}


def find_possible_list(path_dict):
    # print(path_dict)
    candidate_num = sum([len(path_dict[i]) for i in path_dict.keys()])
    common_structure = []
    a = 0
    while True:
        count = {}
        for i in path_dict.keys():
            for j in path_dict[i]:
                if a >= len(j) or j[: len(common_structure)] != common_structure:
                    continue
                if j[a] not in count.keys():
                    count[j[a]] = 0
                count[j[a]] += 1
        t = []
        for i in count.keys():
            t.append([i, count[i]])
        t = sorted(t, key=lambda x: x[1], reverse=True)
        # print(t)
        try:
            if t[0][1] > 0.1 * candidate_num:
                common_structure.append(t[0][0])
            else:
                break
        except:
            return
        a += 1
    t = {}
    for i in path_dict.keys():
        t[i] = path_dict[i].copy()
    for i in t.keys():
        j = 0
        while j < len(t[i]):
            if t[i][j][:len(common_structure)] == common_structure:
                del t[i][j]
            else:
                j += 1
    result = [common_structure]
    a = find_possible_list(t)
    if a:
        result.extend(a)
    # print(result)
    return result


x = {14: [[[16, '<p>', 678, 768, 14, '14-']], [[14, '<p><a>', 679, 681, 33, '14-33-'], [14, '<p><a@>', 685, 687, 34, '14-34-'], [14, '<p><a@@>', 691, 693, 35, '14-35-'], [14, '<p><a@@@>', 697, 699, 36, '14-36-'], [14, '<p><a@@@@>', 703, 705, 37, '14-37-'], [14, '<p><a@@@@@>', 709, 711, 38, '14-38-'], [14, '<p><a@@@@@@>', 715, 717, 39, '14-39-'], [14, '<p><a@@@@@@@>', 721, 723, 40, '14-40-'], [14, '<p><a@@@@@@@@>', 727, 729, 41, '14-41-'], [14, '<p><a@@@@@@@@@>', 733, 735, 42, '14-42-'], [14, '<p><a@@@@@@@@@@>', 739, 741, 43, '14-43-'], [14, '<p><a@@@@@@@@@@@>', 745, 747, 44, '14-44-'], [14, '<p><a@@@@@@@@@@@@>', 751, 753, 45, '14-45-'], [14, '<p><a@@@@@@@@@@@@@>', 757, 759, 46, '14-46-'], [14, '<p><a@@@@@@@@@@@@@@>', 763, 765, 47, '14-47-']]], 15: [[[16, '<h4>', 769, 771, 15, '15-']]], 16: [[[16, '<ul>', 772, 817, 16, '16-']], [[16, '<ul><li>', 773, 794, 48, '16-48-'], [16, '<ul><li@>', 795, 816, 49, '16-49-']], [[48, '<ul><li><a>', 774, 776, 46, '16-48-46-'], [48, '<ul><li><div lcp_customfield>', 778, 780, 47, '16-48-47-'], [48, '<ul><li><p>', 781, 783, 48, '16-48-48-'], [48, '<ul><li><p link-more>', 784, 793, 49, '16-48-49-'], [49, '<ul><li@><a>', 796, 798, 50, '16-49-50-'], [49, '<ul><li@><div lcp_customfield>', 800, 802, 51, '16-49-51-'], [49, '<ul><li@><p>', 803, 805, 52, '16-49-52-'], [49, '<ul><li@><p link-more>', 806, 815, 53, '16-49-53-']], [[49, '<ul><li><p link-more><a more-link>', 785, 792, 38, '16-48-49-38-'], [53, '<ul><li@><p link-more><a more-link>', 807, 814, 39, '16-49-53-39-']], [[38, '<ul><li><p link-more><a more-link><no_tag>', 786, 788, 14, '16-48-49-38-14-'], [38, '<ul><li><p link-more><a more-link><span screen-reader-text>', 789, 791, 15, '16-48-49-38-15-'], [39, '<ul><li@><p link-more><a more-link><no_tag>', 808, 810, 16, '16-49-53-39-16-'], [39, '<ul><li@><p link-more><a more-link><span screen-reader-text>', 811, 813, 17, '16-49-53-39-17-']]], 17: [[[16, '<h4>', 818, 820, 17, '17-']]], 18: [[[16, '<ul>', 821, 910, 18, '18-']], [[18, '<ul><li>', 822, 843, 50, '18-50-'], [18, '<ul><li@>', 844, 865, 51, '18-51-'], [18, '<ul><li@@>', 866, 887, 52, '18-52-'], [18, '<ul><li@@@>', 888, 909, 53, '18-53-']], [[50, '<ul><li><a>', 823, 825, 54, '18-50-54-'], [50, '<ul><li><div lcp_customfield>', 827, 829, 55, '18-50-55-'], [50, '<ul><li><p>', 830, 832, 56, '18-50-56-'], [50, '<ul><li><p link-more>', 833, 842, 57, '18-50-57-'], [51, '<ul><li@><a>', 845, 847, 58, '18-51-58-'], [51, '<ul><li@><div lcp_customfield>', 849, 851, 59, '18-51-59-'], [51, '<ul><li@><p>', 852, 854, 60, '18-51-60-'], [51, '<ul><li@><p link-more>', 855, 864, 61, '18-51-61-'], [52, '<ul><li@@><a>', 867, 869, 62, '18-52-62-'], [52, '<ul><li@@><div lcp_customfield>', 871, 873, 63, '18-52-63-'], [52, '<ul><li@@><p>', 874, 876, 64, '18-52-64-'], [52, '<ul><li@@><p link-more>', 877, 886, 65, '18-52-65-'], [53, '<ul><li@@@><a>', 889, 891, 66, '18-53-66-'], [53, '<ul><li@@@><div lcp_customfield>', 893, 895, 67, '18-53-67-'], [53, '<ul><li@@@><p>', 896, 898, 68, '18-53-68-'], [53, '<ul><li@@@><p link-more>', 899, 908, 69, '18-53-69-']], [[57, '<ul><li><p link-more><a more-link>', 834, 841, 40, '18-50-57-40-'], [61, '<ul><li@><p link-more><a more-link>', 856, 863, 41, '18-51-61-41-'], [65, '<ul><li@@><p link-more><a more-link>', 878, 885, 42, '18-52-65-42-'], [69, '<ul><li@@@><p link-more><a more-link>', 900, 907, 43, '18-53-69-43-']], [[40, '<ul><li><p link-more><a more-link><no_tag>', 835, 837, 18, '18-50-57-40-18-'], [40, '<ul><li><p link-more><a more-link><span screen-reader-text>', 838, 840, 19, '18-50-57-40-19-'], [41, '<ul><li@><p link-more><a more-link><no_tag>', 857, 859, 20, '18-51-61-41-20-'], [41, '<ul><li@><p link-more><a more-link><span screen-reader-text>', 860, 862, 21, '18-51-61-41-21-'], [42, '<ul><li@@><p link-more><a more-link><no_tag>', 879, 881, 22, '18-52-65-42-22-'], [42, '<ul><li@@><p link-more><a more-link><span screen-reader-text>', 882, 884, 23, '18-52-65-42-23-'], [43, '<ul><li@@@><p link-more><a more-link><no_tag>', 901, 903, 24, '18-53-69-43-24-'], [43, '<ul><li@@@><p link-more><a more-link><span screen-reader-text>', 904, 906, 25, '18-53-69-43-25-']]], 19: [[[16, '<h4>', 911, 913, 19, '19-']]], 20: [[[16, '<ul>', 914, 937, 20, '20-']], [[20, '<ul><li>', 915, 936, 54, '20-54-']], [[54, '<ul><li><a>', 916, 918, 70, '20-54-70-'], [54, '<ul><li><div lcp_customfield>', 920, 922, 71, '20-54-71-'], [54, '<ul><li><p>', 923, 925, 72, '20-54-72-'], [54, '<ul><li><p link-more>', 926, 935, 73, '20-54-73-']], [[73, '<ul><li><p link-more><a more-link>', 927, 934, 44, '20-54-73-44-']], [[44, '<ul><li><p link-more><a more-link><no_tag>', 928, 930, 26, '20-54-73-44-26-'], [44, '<ul><li><p link-more><a more-link><span screen-reader-text>', 931, 933, 27, '20-54-73-44-27-']]], 21: [[[16, '<h4>', 938, 940, 21, '21-']]], 22: [[[16, '<ul>', 941, 986, 22, '22-']], [[22, '<ul><li>', 942, 963, 55, '22-55-'], [22, '<ul><li@>', 964, 985, 56, '22-56-']], [[55, '<ul><li><a>', 943, 945, 74, '22-55-74-'], [55, '<ul><li><div lcp_customfield>', 947, 949, 75, '22-55-75-'], [55, '<ul><li><p>', 950, 952, 76, '22-55-76-'], [55, '<ul><li><p link-more>', 953, 962, 77, '22-55-77-'], [56, '<ul><li@><a>', 965, 967, 78, '22-56-78-'], [56, '<ul><li@><div lcp_customfield>', 969, 971, 79, '22-56-79-'], [56, '<ul><li@><p>', 972, 974, 80, '22-56-80-'], [56, '<ul><li@><p link-more>', 975, 984, 81, '22-56-81-']], [[77, '<ul><li><p link-more><a more-link>', 954, 961, 45, '22-55-77-45-'], [81, '<ul><li@><p link-more><a more-link>', 976, 983, 46, '22-56-81-46-']], [[45, '<ul><li><p link-more><a more-link><no_tag>', 955, 957, 28, '22-55-77-45-28-'], [45, '<ul><li><p link-more><a more-link><span screen-reader-text>', 958, 960, 29, '22-55-77-45-29-'], [46, '<ul><li@><p link-more><a more-link><no_tag>', 977, 979, 30, '22-56-81-46-30-'], [46, '<ul><li@><p link-more><a more-link><span screen-reader-text>', 980, 982, 31, '22-56-81-46-31-']]], 23: [[[16, '<h4>', 987, 989, 23, '23-']]], 24: [[[16, '<ul>', 990, 1013, 24, '24-']], [[24, '<ul><li>', 991, 1012, 57, '24-57-']], [[57, '<ul><li><a>', 992, 994, 82, '24-57-82-'], [57, '<ul><li><div lcp_customfield>', 996, 998, 83, '24-57-83-'], [57, '<ul><li><p>', 999, 1001, 84, '24-57-84-'], [57, '<ul><li><p link-more>', 1002, 1011, 85, '24-57-85-']], [[85, '<ul><li><p link-more><a more-link>', 1003, 1010, 47, '24-57-85-47-']], [[47, '<ul><li><p link-more><a more-link><no_tag>', 1004, 1006, 32, '24-57-85-47-32-'], [47, '<ul><li><p link-more><a more-link><span screen-reader-text>', 1007, 1009, 33, '24-57-85-47-33-']]], 25: [[[16, '<h4>', 1014, 1016, 25, '25-']]], 26: [[[16, '<ul>', 1017, 1084, 26, '26-']], [[26, '<ul><li>', 1018, 1039, 58, '26-58-'], [26, '<ul><li@>', 1040, 1061, 59, '26-59-'], [26, '<ul><li@@>', 1062, 1083, 60, '26-60-']], [[58, '<ul><li><a>', 1019, 1021, 86, '26-58-86-'], [58, '<ul><li><div lcp_customfield>', 1023, 1025, 87, '26-58-87-'], [58, '<ul><li><p>', 1026, 1028, 88, '26-58-88-'], [58, '<ul><li><p link-more>', 1029, 1038, 89, '26-58-89-'], [59, '<ul><li@><a>', 1041, 1043, 90, '26-59-90-'], [59, '<ul><li@><div lcp_customfield>', 1045, 1047, 91, '26-59-91-'], [59, '<ul><li@><p>', 1048, 1050, 92, '26-59-92-'], [59, '<ul><li@><p link-more>', 1051, 1060, 93, '26-59-93-'], [60, '<ul><li@@><a>', 1063, 1065, 94, '26-60-94-'], [60, '<ul><li@@><div lcp_customfield>', 1067, 1069, 95, '26-60-95-'], [60, '<ul><li@@><p>', 1070, 1072, 96, '26-60-96-'], [60, '<ul><li@@><p link-more>', 1073, 1082, 97, '26-60-97-']], [[89, '<ul><li><p link-more><a more-link>', 1030, 1037, 48, '26-58-89-48-'], [93, '<ul><li@><p link-more><a more-link>', 1052, 1059, 49, '26-59-93-49-'], [97, '<ul><li@@><p link-more><a more-link>', 1074, 1081, 50, '26-60-97-50-']], [[48, '<ul><li><p link-more><a more-link><no_tag>', 1031, 1033, 34, '26-58-89-48-34-'], [48, '<ul><li><p link-more><a more-link><span screen-reader-text>', 1034, 1036, 35, '26-58-89-48-35-'], [49, '<ul><li@><p link-more><a more-link><no_tag>', 1053, 1055, 36, '26-59-93-49-36-'], [49, '<ul><li@><p link-more><a more-link><span screen-reader-text>', 1056, 1058, 37, '26-59-93-49-37-'], [50, '<ul><li@@><p link-more><a more-link><no_tag>', 1075, 1077, 38, '26-60-97-50-38-'], [50, '<ul><li@@><p link-more><a more-link><span screen-reader-text>', 1078, 1080, 39, '26-60-97-50-39-']]], 27: [[[16, '<h4>', 1085, 1087, 27, '27-']]], 28: [[[16, '<ul>', 1088, 1199, 28, '28-']], [[28, '<ul><li>', 1089, 1110, 61, '28-61-'], [28, '<ul><li@>', 1111, 1132, 62, '28-62-'], [28, '<ul><li@@>', 1133, 1154, 63, '28-63-'], [28, '<ul><li@@@>', 1155, 1176, 64, '28-64-'], [28, '<ul><li@@@@>', 1177, 1198, 65, '28-65-']], [[61, '<ul><li><a>', 1090, 1092, 98, '28-61-98-'], [61, '<ul><li><div lcp_customfield>', 1094, 1096, 99, '28-61-99-'], [61, '<ul><li><p>', 1097, 1099, 100, '28-61-100-'], [61, '<ul><li><p link-more>', 1100, 1109, 101, '28-61-101-'], [62, '<ul><li@><a>', 1112, 1114, 102, '28-62-102-'], [62, '<ul><li@><div lcp_customfield>', 1116, 1118, 103, '28-62-103-'], [62, '<ul><li@><p>', 1119, 1121, 104, '28-62-104-'], [62, '<ul><li@><p link-more>', 1122, 1131, 105, '28-62-105-'], [63, '<ul><li@@><a>', 1134, 1136, 106, '28-63-106-'], [63, '<ul><li@@><div lcp_customfield>', 1138, 1140, 107, '28-63-107-'], [63, '<ul><li@@><p>', 1141, 1143, 108, '28-63-108-'], [63, '<ul><li@@><p link-more>', 1144, 1153, 109, '28-63-109-'], [64, '<ul><li@@@><a>', 1156, 1158, 110, '28-64-110-'], [64, '<ul><li@@@><div lcp_customfield>', 1160, 1162, 111, '28-64-111-'], [64, '<ul><li@@@><p>', 1163, 1165, 112, '28-64-112-'], [64, '<ul><li@@@><p link-more>', 1166, 1175, 113, '28-64-113-'], [65, '<ul><li@@@@><a>', 1178, 1180, 114, '28-65-114-'], [65, '<ul><li@@@@><div lcp_customfield>', 1182, 1184, 115, '28-65-115-'], [65, '<ul><li@@@@><p>', 1185, 1187, 116, '28-65-116-'], [65, '<ul><li@@@@><p link-more>', 1188, 1197, 117, '28-65-117-']], [[101, '<ul><li><p link-more><a more-link>', 1101, 1108, 51, '28-61-101-51-'], [105, '<ul><li@><p link-more><a more-link>', 1123, 1130, 52, '28-62-105-52-'], [109, '<ul><li@@><p link-more><a more-link>', 1145, 1152, 53, '28-63-109-53-'], [113, '<ul><li@@@><p link-more><a more-link>', 1167, 1174, 54, '28-64-113-54-'], [117, '<ul><li@@@@><p link-more><a more-link>', 1189, 1196, 55, '28-65-117-55-']], [[51, '<ul><li><p link-more><a more-link><no_tag>', 1102, 1104, 40, '28-61-101-51-40-'], [51, '<ul><li><p link-more><a more-link><span screen-reader-text>', 1105, 1107, 41, '28-61-101-51-41-'], [52, '<ul><li@><p link-more><a more-link><no_tag>', 1124, 1126, 42, '28-62-105-52-42-'], [52, '<ul><li@><p link-more><a more-link><span screen-reader-text>', 1127, 1129, 43, '28-62-105-52-43-'], [53, '<ul><li@@><p link-more><a more-link><no_tag>', 1146, 1148, 44, '28-63-109-53-44-'], [53, '<ul><li@@><p link-more><a more-link><span screen-reader-text>', 1149, 1151, 45, '28-63-109-53-45-'], [54, '<ul><li@@@><p link-more><a more-link><no_tag>', 1168, 1170, 46, '28-64-113-54-46-'], [54, '<ul><li@@@><p link-more><a more-link><span screen-reader-text>', 1171, 1173, 47, '28-64-113-54-47-'], [55, '<ul><li@@@@><p link-more><a more-link><no_tag>', 1190, 1192, 48, '28-65-117-55-48-'], [55, '<ul><li@@@@><p link-more><a more-link><span screen-reader-text>', 1193, 1195, 49, '28-65-117-55-49-']]], 29: [[[16, '<h4>', 1200, 1202, 29, '29-']]], 30: [[[16, '<ul>', 1203, 1248, 30, '30-']], [[30, '<ul><li>', 1204, 1225, 66, '30-66-'], [30, '<ul><li@>', 1226, 1247, 67, '30-67-']], [[66, '<ul><li><a>', 1205, 1207, 118, '30-66-118-'], [66, '<ul><li><div lcp_customfield>', 1209, 1211, 119, '30-66-119-'], [66, '<ul><li><p>', 1212, 1214, 120, '30-66-120-'], [66, '<ul><li><p link-more>', 1215, 1224, 121, '30-66-121-'], [67, '<ul><li@><a>', 1227, 1229, 122, '30-67-122-'], [67, '<ul><li@><div lcp_customfield>', 1231, 1233, 123, '30-67-123-'], [67, '<ul><li@><p>', 1234, 1236, 124, '30-67-124-'], [67, '<ul><li@><p link-more>', 1237, 1246, 125, '30-67-125-']], [[121, '<ul><li><p link-more><a more-link>', 1216, 1223, 56, '30-66-121-56-'], [125, '<ul><li@><p link-more><a more-link>', 1238, 1245, 57, '30-67-125-57-']], [[56, '<ul><li><p link-more><a more-link><no_tag>', 1217, 1219, 50, '30-66-121-56-50-'], [56, '<ul><li><p link-more><a more-link><span screen-reader-text>', 1220, 1222, 51, '30-66-121-56-51-'], [57, '<ul><li@><p link-more><a more-link><no_tag>', 1239, 1241, 52, '30-67-125-57-52-'], [57, '<ul><li@><p link-more><a more-link><span screen-reader-text>', 1242, 1244, 53, '30-67-125-57-53-']]], 31: [[[16, '<h4>', 1249, 1251, 31, '31-']]], 32: [[[16, '<ul>', 1252, 1297, 32, '32-']], [[32, '<ul><li>', 1253, 1274, 68, '32-68-'], [32, '<ul><li@>', 1275, 1296, 69, '32-69-']], [[68, '<ul><li><a>', 1254, 1256, 126, '32-68-126-'], [68, '<ul><li><div lcp_customfield>', 1258, 1260, 127, '32-68-127-'], [68, '<ul><li><p>', 1261, 1263, 128, '32-68-128-'], [68, '<ul><li><p link-more>', 1264, 1273, 129, '32-68-129-'], [69, '<ul><li@><a>', 1276, 1278, 130, '32-69-130-'], [69, '<ul><li@><div lcp_customfield>', 1280, 1282, 131, '32-69-131-'], [69, '<ul><li@><p>', 1283, 1285, 132, '32-69-132-'], [69, '<ul><li@><p link-more>', 1286, 1295, 133, '32-69-133-']], [[129, '<ul><li><p link-more><a more-link>', 1265, 1272, 58, '32-68-129-58-'], [133, '<ul><li@><p link-more><a more-link>', 1287, 1294, 59, '32-69-133-59-']], [[58, '<ul><li><p link-more><a more-link><no_tag>', 1266, 1268, 54, '32-68-129-58-54-'], [58, '<ul><li><p link-more><a more-link><span screen-reader-text>', 1269, 1271, 55, '32-68-129-58-55-'], [59, '<ul><li@><p link-more><a more-link><no_tag>', 1288, 1290, 56, '32-69-133-59-56-'], [59, '<ul><li@><p link-more><a more-link><span screen-reader-text>', 1291, 1293, 57, '32-69-133-59-57-']]], 33: [[[16, '<h4>', 1298, 1300, 33, '33-']]], 34: [[[16, '<ul>', 1301, 1390, 34, '34-']], [[34, '<ul><li>', 1302, 1323, 70, '34-70-'], [34, '<ul><li@>', 1324, 1345, 71, '34-71-'], [34, '<ul><li@@>', 1346, 1367, 72, '34-72-'], [34, '<ul><li@@@>', 1368, 1389, 73, '34-73-']], [[70, '<ul><li><a>', 1303, 1305, 134, '34-70-134-'], [70, '<ul><li><div lcp_customfield>', 1307, 1309, 135, '34-70-135-'], [70, '<ul><li><p>', 1310, 1312, 136, '34-70-136-'], [70, '<ul><li><p link-more>', 1313, 1322, 137, '34-70-137-'], [71, '<ul><li@><a>', 1325, 1327, 138, '34-71-138-'], [71, '<ul><li@><div lcp_customfield>', 1329, 1331, 139, '34-71-139-'], [71, '<ul><li@><p>', 1332, 1334, 140, '34-71-140-'], [71, '<ul><li@><p link-more>', 1335, 1344, 141, '34-71-141-'], [72, '<ul><li@@><a>', 1347, 1349, 142, '34-72-142-'], [72, '<ul><li@@><div lcp_customfield>', 1351, 1353, 143, '34-72-143-'], [72, '<ul><li@@><p>', 1354, 1356, 144, '34-72-144-'], [72, '<ul><li@@><p link-more>', 1357, 1366, 145, '34-72-145-'], [73, '<ul><li@@@><a>', 1369, 1371, 146, '34-73-146-'], [73, '<ul><li@@@><div lcp_customfield>', 1373, 1375, 147, '34-73-147-'], [73, '<ul><li@@@><p>', 1376, 1378, 148, '34-73-148-'], [73, '<ul><li@@@><p link-more>', 1379, 1388, 149, '34-73-149-']], [[137, '<ul><li><p link-more><a more-link>', 1314, 1321, 60, '34-70-137-60-'], [141, '<ul><li@><p link-more><a more-link>', 1336, 1343, 61, '34-71-141-61-'], [145, '<ul><li@@><p link-more><a more-link>', 1358, 1365, 62, '34-72-145-62-'], [149, '<ul><li@@@><p link-more><a more-link>', 1380, 1387, 63, '34-73-149-63-']], [[60, '<ul><li><p link-more><a more-link><no_tag>', 1315, 1317, 58, '34-70-137-60-58-'], [60, '<ul><li><p link-more><a more-link><span screen-reader-text>', 1318, 1320, 59, '34-70-137-60-59-'], [61, '<ul><li@><p link-more><a more-link><no_tag>', 1337, 1339, 60, '34-71-141-61-60-'], [61, '<ul><li@><p link-more><a more-link><span screen-reader-text>', 1340, 1342, 61, '34-71-141-61-61-'], [62, '<ul><li@@><p link-more><a more-link><no_tag>', 1359, 1361, 62, '34-72-145-62-62-'], [62, '<ul><li@@><p link-more><a more-link><span screen-reader-text>', 1362, 1364, 63, '34-72-145-62-63-'], [63, '<ul><li@@@><p link-more><a more-link><no_tag>', 1381, 1383, 64, '34-73-149-63-64-'], [63, '<ul><li@@@><p link-more><a more-link><span screen-reader-text>', 1384, 1386, 65, '34-73-149-63-65-']]], 35: [[[16, '<h4>', 1391, 1393, 35, '35-']]], 36: [[[16, '<ul>', 1394, 1483, 36, '36-']], [[36, '<ul><li>', 1395, 1416, 74, '36-74-'], [36, '<ul><li@>', 1417, 1438, 75, '36-75-'], [36, '<ul><li@@>', 1439, 1460, 76, '36-76-'], [36, '<ul><li@@@>', 1461, 1482, 77, '36-77-']], [[74, '<ul><li><a>', 1396, 1398, 150, '36-74-150-'], [74, '<ul><li><div lcp_customfield>', 1400, 1402, 151, '36-74-151-'], [74, '<ul><li><p>', 1403, 1405, 152, '36-74-152-'], [74, '<ul><li><p link-more>', 1406, 1415, 153, '36-74-153-'], [75, '<ul><li@><a>', 1418, 1420, 154, '36-75-154-'], [75, '<ul><li@><div lcp_customfield>', 1422, 1424, 155, '36-75-155-'], [75, '<ul><li@><p>', 1425, 1427, 156, '36-75-156-'], [75, '<ul><li@><p link-more>', 1428, 1437, 157, '36-75-157-'], [76, '<ul><li@@><a>', 1440, 1442, 158, '36-76-158-'], [76, '<ul><li@@><div lcp_customfield>', 1444, 1446, 159, '36-76-159-'], [76, '<ul><li@@><p>', 1447, 1449, 160, '36-76-160-'], [76, '<ul><li@@><p link-more>', 1450, 1459, 161, '36-76-161-'], [77, '<ul><li@@@><a>', 1462, 1464, 162, '36-77-162-'], [77, '<ul><li@@@><div lcp_customfield>', 1466, 1468, 163, '36-77-163-'], [77, '<ul><li@@@><p>', 1469, 1471, 164, '36-77-164-'], [77, '<ul><li@@@><p link-more>', 1472, 1481, 165, '36-77-165-']], [[153, '<ul><li><p link-more><a more-link>', 1407, 1414, 64, '36-74-153-64-'], [157, '<ul><li@><p link-more><a more-link>', 1429, 1436, 65, '36-75-157-65-'], [161, '<ul><li@@><p link-more><a more-link>', 1451, 1458, 66, '36-76-161-66-'], [165, '<ul><li@@@><p link-more><a more-link>', 1473, 1480, 67, '36-77-165-67-']], [[64, '<ul><li><p link-more><a more-link><no_tag>', 1408, 1410, 66, '36-74-153-64-66-'], [64, '<ul><li><p link-more><a more-link><span screen-reader-text>', 1411, 1413, 67, '36-74-153-64-67-'], [65, '<ul><li@><p link-more><a more-link><no_tag>', 1430, 1432, 68, '36-75-157-65-68-'], [65, '<ul><li@><p link-more><a more-link><span screen-reader-text>', 1433, 1435, 69, '36-75-157-65-69-'], [66, '<ul><li@@><p link-more><a more-link><no_tag>', 1452, 1454, 70, '36-76-161-66-70-'], [66, '<ul><li@@><p link-more><a more-link><span screen-reader-text>', 1455, 1457, 71, '36-76-161-66-71-'], [67, '<ul><li@@@><p link-more><a more-link><no_tag>', 1474, 1476, 72, '36-77-165-67-72-'], [67, '<ul><li@@@><p link-more><a more-link><span screen-reader-text>', 1477, 1479, 73, '36-77-165-67-73-']]], 37: [[[16, '<h4>', 1484, 1486, 37, '37-']]], 38: [[[16, '<ul>', 1487, 1598, 38, '38-']], [[38, '<ul><li>', 1488, 1509, 78, '38-78-'], [38, '<ul><li@>', 1510, 1531, 79, '38-79-'], [38, '<ul><li@@>', 1532, 1553, 80, '38-80-'], [38, '<ul><li@@@>', 1554, 1575, 81, '38-81-'], [38, '<ul><li@@@@>', 1576, 1597, 82, '38-82-']], [[78, '<ul><li><a>', 1489, 1491, 166, '38-78-166-'], [78, '<ul><li><div lcp_customfield>', 1493, 1495, 167, '38-78-167-'], [78, '<ul><li><p>', 1496, 1498, 168, '38-78-168-'], [78, '<ul><li><p link-more>', 1499, 1508, 169, '38-78-169-'], [79, '<ul><li@><a>', 1511, 1513, 170, '38-79-170-'], [79, '<ul><li@><div lcp_customfield>', 1515, 1517, 171, '38-79-171-'], [79, '<ul><li@><p>', 1518, 1520, 172, '38-79-172-'], [79, '<ul><li@><p link-more>', 1521, 1530, 173, '38-79-173-'], [80, '<ul><li@@><a>', 1533, 1535, 174, '38-80-174-'], [80, '<ul><li@@><div lcp_customfield>', 1537, 1539, 175, '38-80-175-'], [80, '<ul><li@@><p>', 1540, 1542, 176, '38-80-176-'], [80, '<ul><li@@><p link-more>', 1543, 1552, 177, '38-80-177-'], [81, '<ul><li@@@><a>', 1555, 1557, 178, '38-81-178-'], [81, '<ul><li@@@><div lcp_customfield>', 1559, 1561, 179, '38-81-179-'], [81, '<ul><li@@@><p>', 1562, 1564, 180, '38-81-180-'], [81, '<ul><li@@@><p link-more>', 1565, 1574, 181, '38-81-181-'], [82, '<ul><li@@@@><a>', 1577, 1579, 182, '38-82-182-'], [82, '<ul><li@@@@><div lcp_customfield>', 1581, 1583, 183, '38-82-183-'], [82, '<ul><li@@@@><p>', 1584, 1586, 184, '38-82-184-'], [82, '<ul><li@@@@><p link-more>', 1587, 1596, 185, '38-82-185-']], [[169, '<ul><li><p link-more><a more-link>', 1500, 1507, 68, '38-78-169-68-'], [173, '<ul><li@><p link-more><a more-link>', 1522, 1529, 69, '38-79-173-69-'], [177, '<ul><li@@><p link-more><a more-link>', 1544, 1551, 70, '38-80-177-70-'], [181, '<ul><li@@@><p link-more><a more-link>', 1566, 1573, 71, '38-81-181-71-'], [185, '<ul><li@@@@><p link-more><a more-link>', 1588, 1595, 72, '38-82-185-72-']], [[68, '<ul><li><p link-more><a more-link><no_tag>', 1501, 1503, 74, '38-78-169-68-74-'], [68, '<ul><li><p link-more><a more-link><span screen-reader-text>', 1504, 1506, 75, '38-78-169-68-75-'], [69, '<ul><li@><p link-more><a more-link><no_tag>', 1523, 1525, 76, '38-79-173-69-76-'], [69, '<ul><li@><p link-more><a more-link><span screen-reader-text>', 1526, 1528, 77, '38-79-173-69-77-'], [70, '<ul><li@@><p link-more><a more-link><no_tag>', 1545, 1547, 78, '38-80-177-70-78-'], [70, '<ul><li@@><p link-more><a more-link><span screen-reader-text>', 1548, 1550, 79, '38-80-177-70-79-'], [71, '<ul><li@@@><p link-more><a more-link><no_tag>', 1567, 1569, 80, '38-81-181-71-80-'], [71, '<ul><li@@@><p link-more><a more-link><span screen-reader-text>', 1570, 1572, 81, '38-81-181-71-81-'], [72, '<ul><li@@@@><p link-more><a more-link><no_tag>', 1589, 1591, 82, '38-82-185-72-82-'], [72, '<ul><li@@@@><p link-more><a more-link><span screen-reader-text>', 1592, 1594, 83, '38-82-185-72-83-']]], 39: [[[16, '<h4>', 1599, 1601, 39, '39-']]], 40: [[[16, '<ul>', 1602, 1625, 40, '40-']], [[40, '<ul><li>', 1603, 1624, 83, '40-83-']], [[83, '<ul><li><a>', 1604, 1606, 186, '40-83-186-'], [83, '<ul><li><div lcp_customfield>', 1608, 1610, 187, '40-83-187-'], [83, '<ul><li><p>', 1611, 1613, 188, '40-83-188-'], [83, '<ul><li><p link-more>', 1614, 1623, 189, '40-83-189-']], [[189, '<ul><li><p link-more><a more-link>', 1615, 1622, 73, '40-83-189-73-']], [[73, '<ul><li><p link-more><a more-link><no_tag>', 1616, 1618, 84, '40-83-189-73-84-'], [73, '<ul><li><p link-more><a more-link><span screen-reader-text>', 1619, 1621, 85, '40-83-189-73-85-']]], 41: [[[16, '<h4>', 1626, 1628, 41, '41-']]], 42: [[[16, '<ul>', 1629, 1652, 42, '42-']], [[42, '<ul><li>', 1630, 1651, 84, '42-84-']], [[84, '<ul><li><a>', 1631, 1633, 190, '42-84-190-'], [84, '<ul><li><div lcp_customfield>', 1635, 1637, 191, '42-84-191-'], [84, '<ul><li><p>', 1638, 1640, 192, '42-84-192-'], [84, '<ul><li><p link-more>', 1641, 1650, 193, '42-84-193-']], [[193, '<ul><li><p link-more><a more-link>', 1642, 1649, 74, '42-84-193-74-']], [[74, '<ul><li><p link-more><a more-link><no_tag>', 1643, 1645, 86, '42-84-193-74-86-'], [74, '<ul><li><p link-more><a more-link><span screen-reader-text>', 1646, 1648, 87, '42-84-193-74-87-']]], 43: [[[16, '<h4>', 1653, 1655, 43, '43-']]], 44: [[[16, '<ul>', 1656, 1679, 44, '44-']], [[44, '<ul><li>', 1657, 1678, 85, '44-85-']], [[85, '<ul><li><a>', 1658, 1660, 194, '44-85-194-'], [85, '<ul><li><div lcp_customfield>', 1662, 1664, 195, '44-85-195-'], [85, '<ul><li><p>', 1665, 1667, 196, '44-85-196-'], [85, '<ul><li><p link-more>', 1668, 1677, 197, '44-85-197-']], [[197, '<ul><li><p link-more><a more-link>', 1669, 1676, 75, '44-85-197-75-']], [[75, '<ul><li><p link-more><a more-link><no_tag>', 1670, 1672, 88, '44-85-197-75-88-'], [75, '<ul><li><p link-more><a more-link><span screen-reader-text>', 1673, 1675, 89, '44-85-197-75-89-']]]}
y = {'Research Interest': '<ul><li><p>', 'Name': '<ul><li><a>', 'Position': '<ul><li><div lcp_customfield>', 'Phone number': 'None'}


def handle_extreme_edge_case(subtree_dict_pre, subtree_path_pre, raw_html):
    subtree_path = {}
    for i in subtree_path_pre.keys():
        t = subtree_path_pre[i]
        if isinstance(t, str) and t != 'None':
            if t.count('<') > 2:
                subtree_path[i] = t[t.index('>') + 1:]
            else:
                return 0, []
        else:
            if isinstance(t, str):
                subtree_path[i] = t
            else:
                subtree_path[i] = t.copy()
    a = ''
    for i in subtree_path.keys():
        if isinstance(subtree_path[i], str) and subtree_path[i] != 'None':
            t = subtree_path[i][:subtree_path[i].index('>')]
            if ' ' in t:
                t = t[:t.index(' ')]
            if a == '':
                a = t
            if t != a:
                return 0, []

    subtree_dict = {}
    for i in subtree_dict_pre.keys():
        subtree_dict_key = []
        if len(subtree_dict_pre[i]) < 3:
            continue
        for j in subtree_dict_pre[i][1]:
            subtree_dict_key.append(j[4])
        for j in subtree_dict_key:
            l = []
            for k in subtree_dict_pre[i][1:]:
                lt = []
                for kk in k:
                    t = kk[-1][kk[-1].index('-') + 1:]
                    if t[:t.index('-')] != str(j):
                        continue
                    t1 = kk[1][kk[1].index('>') + 1:]
                    t11 = t1[:t1.index('>')]
                    t11 = t11.replace('@', '') + t1[t1.index('>'):]
                    lt.append([kk[0], t11, kk[2], kk[3], kk[4], t])
                if len(lt) == 0:
                    break
                l.append(lt.copy())
            subtree_dict[j] = l
    # for i in subtree_dict.keys():
    #     print(subtree_dict[i])

    path_to_result = {}
    for i in subtree_dict.keys():
        path_to_result[i] = {}
        for j in subtree_dict[i]:
            for k in j:
                path_to_result[i][k[1]] = [k[2], k[3]]
    # print(subtree_path)

    result = []
    total_miss, total_num, total_match = 0, 1, 0
    for i in path_to_result.keys():
        d = {}
        missing = 0
        for j in subtree_path.keys():
            p = subtree_path[j]
            if isinstance(p, str):
                if p not in path_to_result[i].keys():
                    p = p[:p.rfind('<')]
                    if p in path_to_result[i].keys() and path_to_result[i][p][1] - path_to_result[i][p][0] > 2:
                        p = subtree_path[j]
                if p not in path_to_result[i].keys():
                    p = p[:p.rfind('<')]
                    if p in path_to_result[i].keys() and path_to_result[i][p][1] - path_to_result[i][p][0] > 2:
                        p = subtree_path[j]
                if p in path_to_result[i].keys():
                    a = ''
                    for k in range(path_to_result[i][p][0], path_to_result[i][p][1]):
                        if raw_html[k][0] != '<':
                            a += raw_html[k] + ' '
                    a = a.replace('\n', ' ')
                    if ' ' in a:
                        a = a[:-1]
                    # print(j + ': ' + a)
                    d[j] = a
                    total_match += 1
                else:
                    # print(j + ': missing')
                    d[j] = 'Missing'
                    missing += 1
            else:
                try:
                    parent = ''
                    if p[0] == 'start' or p[0] == 'end':
                        parent = p[-1]
                    else:
                        parent = p[0][:p[0].rfind('<')]
                    siblings = []
                    for kk in subtree_dict[i][parent.count('<')]:
                        if kk[1][:len(parent)] == parent:
                            siblings.append(kk.copy())
                    position = -1
                    if p[0] == 'start':
                        position = p[1]
                    elif p[0] == 'end':
                        position = len(siblings) - 1 + p[1]
                    else:
                        for k in range(len(siblings)):
                            if siblings[k][1] == p[0]:
                                position = k + p[1]
                    if 0 <= position < len(siblings):
                        a = ''
                        for k in range(siblings[position][2], siblings[position][3]):
                            if raw_html[k][0] != '<':
                                a += raw_html[k] + ' '
                        a = a.replace('\n', ' ')
                        if ' ' in a:
                            a = a[:-1]
                        # print(j + ': ' + a)
                        d[j] = a
                        total_match += 1
                    else:
                        # print(j + ': missing')
                        d[j] = 'Missing'
                        missing += 1
                except:
                    # print(j + ': missing')
                    d[j] = 'Missing'
                    missing += 1

        cell_range = [0, 0]
        for j in path_to_result[i].keys():
            if j.count('<') == 1:
                cell_range = path_to_result[i][j].copy()

        # print()
        if missing < 3:
            result.append(d.copy())
        total_miss += missing
        total_num += 1
    # print(subtree_path)
    # print('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')
    # print('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')
    # print('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')

    return total_match, result

